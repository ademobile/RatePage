<?php

/**
 * API for getting the page rating and voting for pages
 *
 * @file
 * @ingroup Extensions
 * @license MIT
 */
class ApiPageRating extends ApiBase {
	public function execute() {
		$params = $this->extractRequestParams();
		$this->requireOnlyOneParameter( $params, 'pageid', 'pagetitle' );

        if (isset($params['pageid']))
            $title = Title::newFromID($params['pageid']);
		else $title = Title::newFromText($params['pagetitle']);

		if (is_null($title) || $title->getArticleID() < 0)
            $this->dieWithError( 'Specified page does not exist' );
		
		$user = RequestContext::getMain()->getUser();
		$ip = RequestContext::getMain()->getRequest()->getIP();
		if ( $user->getName() == '' ) {
			$userName = $ip;
		} else {
			$userName = $user->getName();
		}

		$this->getResult()->addValue( null, "pageId", $title->getArticleID() );

		if (isset($params['answer'])) {
			$answer = $params['answer'];
			if ( $answer < RatePage::MIN_RATING || $answer > RatePage::MAX_RATING )
            	$this->dieWithError( 'Incorrect answer specified' );
			$result = RatePage::voteOnPage($title, $userName, $ip, $answer);
			$this->getResult()->addValue( null, "voteSuccessful", ($result) ? "true" : "false" );
		}
		$userVote = RatePage::getUserVote($title, $userName, $ip);

		$pageViews = RatePage::getPageViews($title);
		$pageRating = RatePage::getPageRating($title);

		$this->getResult()->addValue( null, "viewCount", $pageViews );
		$this->getResult()->addValue( null, "pageRating", $pageRating );
		$this->getResult()->addValue( null, "userVote", $userVote );
	}

	/**
	 * Get the cache mode for the data generated by this module
	 *
	 * @param array $params Ignored parameters
	 * @return string Always returns "private"
	 */
	public function getCacheMode( $params ) {
		return 'private';
	}

	/**
	 * Return an array describing all possible parameters to this module
	 * @return array
	 */
	public function getAllowedParams() {
		return [
			'pageid' => [
				ApiBase::PARAM_TYPE => 'integer'
            ],
            'pagetitle' => [
                ApiBase::PARAM_TYPE => 'string'
			],
			'answer' => [
                ApiBase::PARAM_TYPE => 'integer'
            ]
		];
	}

	/**
	 * @inheritDoc
	 */
	protected function getExamplesMessages() {
		return [
			
		];
	}
}