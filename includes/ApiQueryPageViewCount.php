<?php

/**
 * API for page view count
 *
 * @file
 * @ingroup Extensions
 * @license MIT
 */
class ApiQueryPageViewCount extends ApiQueryBase {
	/**
	 * @param ApiQuery $query API query module
	 * @param string $moduleName Name of this query module
	 */
	public function __construct( ApiQuery $query, $moduleName ) {
		parent::__construct( $query, $moduleName, 'pvc' );
	}

	/**
	 * Evaluates the parameters, performs the requested retrieval of page images,
	 * and sets up the result
	 * @return null
	 */
	public function execute() {
		$params = $this->extractRequestParams();
		$prop = array_flip( $params['prop'] );
		if ( !isset($params['pageid']) && !isset($params['[agetitle']) ) {
			$this->dieWithError(
				[ 'apierror-paramempty', $this->encodeParamName( 'ids' ) ], 'noids'
			);
		}


        if (isset($params['pageid']))
            $title = Title::newFromID($params['pageid']);
        else $title = Title::newFromText($params['pagetitle']);

        $pageViews = RatePage::getPageViews($title);

        $this->getResult()->addValue( [ 'query', 'page' ], $title->getArticleID(), [ $pageViews ] );
	}

	/**
	 * Get property names used in page_props table
	 *
	 * If the license is free, then only the free property name will be returned,
	 * otherwise both free and non-free property names will be returned. That's
	 * because we save the image name only once if it's free and the best image.
	 *
	 * @param string $license either PARAM_LICENSE_FREE or PARAM_LICENSE_ANY,
	 * specifying whether to return the non-free property name or not
	 * @return string|array
	 */
	protected static function getPropNames( $license ) {
		if ( $license === self::PARAM_LICENSE_FREE ) {
			return PageImages::getPropName( true );
		}
		return [ PageImages::getPropName( true ), PageImages::getPropName( false ) ];
	}

	/**
	 * Get the cache mode for the data generated by this module
	 *
	 * @param array $params Ignored parameters
	 * @return string Always returns "public"
	 */
	public function getCacheMode( $params ) {
		return 'public';
	}

	/**
	 * For a given page, set API return values for thumbnail and pageimage as needed
	 *
	 * @param array $prop The prop values from the API request
	 * @param int $pageId The ID of the page
	 * @param string $fileName The name of the file to transform
	 * @param int $size The thumbsize value from the API request
	 */
	protected function setResultValues( array $prop, $pageId, $fileName, $size ) {
		$vals = [];
		if ( isset( $prop['thumbnail'] ) || isset( $prop['original'] ) ) {
			$file = wfFindFile( $fileName );
			if ( $file ) {
				if ( isset( $prop['thumbnail'] ) ) {
					$thumb = $file->transform( [ 'width' => $size, 'height' => $size ] );
					if ( $thumb && $thumb->getUrl() ) {
						// You can request a thumb 1000x larger than the original
						// which (in case of bitmap original) will return a Thumb object
						// that will lie about its size but have the original as an image.
						$reportedSize = $thumb->fileIsSource() ? $file : $thumb;
						$vals['thumbnail'] = [
							'source' => wfExpandUrl( $thumb->getUrl(), PROTO_CURRENT ),
							'width' => $reportedSize->getWidth(),
							'height' => $reportedSize->getHeight(),
						];
					}
				}

				if ( isset( $prop['original'] ) ) {
					$original_url = wfExpandUrl( $file->getUrl(), PROTO_CURRENT );

					$vals['original'] = [
						'source' => $original_url,
						'width' => $file->getWidth(),
						'height' => $file->getHeight()
					];
				}
			}
		}

		if ( isset( $prop['name'] ) ) {
			$vals['pageimage'] = $fileName;
		}

		$this->getResult()->addValue( [ 'query', 'pages' ], $pageId, $vals );
	}

	/**
	 * Return an array describing all possible parameters to this module
	 * @return array
	 */
	public function getAllowedParams() {
		return [
			'pageid' => [
				ApiBase::PARAM_TYPE => 'int'
            ],
            'pagetitle' => [
                ApiBase::PARAM_TYPE => 'string'
            ]
		];
	}

	/**
	 * @inheritDoc
	 */
	protected function getExamplesMessages() {
		return [
			'action=query&prop=pageimages&titles=Albert%20Einstein&pithumbsize=100' =>
				'apihelp-query+pageimages-example-1',
		];
	}
}