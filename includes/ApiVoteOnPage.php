<?php

/**
 * API for voting on a page
 *
 * @file
 * @ingroup Extensions
 * @license MIT
 */
class ApiVoteOnPage extends ApiBase {
	public function execute() {
		$params = $this->extractRequestParams();
        $this->requireOnlyOneParameter( $params, 'pageid', 'pagetitle' );
        $this->requireAtLeastOneParameter( $params, 'answer' );

        $answer = $params['answer'];
        if ($answer < 0 || $answer > 1)
            $this->dieWithError( 'Incorrect answer specified' );

        if (isset($params['pageid']))
            $title = Title::newFromID($params['pageid']);
        else $title = Title::newFromText($params['pagetitle']);
        
        if (is_null($title) || $title->getArticleID() < 0)
            $this->dieWithError( 'Specified page does not exist' );
		
        $user = RequestContext::getMain()->getUser();
        $ip = RequestContext::getMain()->getRequest()->getIP();
		if ( $user->getName() == '' ) {
			$userName = $ip;
		} else {
			$userName = $user->getName();
        }

        $result = RatePage::voteOnPage($title, $userName, $ip, $answer);
		$pageViews = RatePage::getPageViews($title);
		$pageRating = RatePage::getPageRating($title);

        $this->getResult()->addValue( null, "voteSuccessful", ($result) ? "true" : "false" );
		$this->getResult()->addValue( null, "pageViews", [ "viewCount" => $pageViews ] );
		$this->getResult()->addValue( null, "pageRating", $pageRating );
		$this->getResult()->addValue( null, "userVoted", "true" );
	}

	/**
	 * Get the cache mode for the data generated by this module
	 *
	 * @param array $params Ignored parameters
	 * @return string Always returns "private"
	 */
	public function getCacheMode( $params ) {
		return 'private';
	}

	/**
	 * Return an array describing all possible parameters to this module
	 * @return array
	 */
	public function getAllowedParams() {
		return [
			'pageid' => [
				ApiBase::PARAM_TYPE => 'integer'
            ],
            'pagetitle' => [
                ApiBase::PARAM_TYPE => 'string'
            ],
            'answer' => [
                ApiBase::PARAM_TYPE => 'integer',
                ApiBase::PARAM_REQUIRED => true
            ]
		];
	}

	/**
	 * @inheritDoc
	 */
	protected function getExamplesMessages() {
		return [
			
		];
	}
}